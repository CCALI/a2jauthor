#!/usr/bin/env node

var path = require('path')
var fs = require('fs-extra')
var chalk = require('chalk')
var archiver = require('archiver')

var datPath = path.join(__dirname, '..')
var outputPath = path.join(datPath, '..', 'a2j-dat')

// remove any existing build first
fs.removeSync(outputPath)

makePackageFolder()
makePackageZip()

function makePackageFolder () {
  fs.mkdirSync(outputPath)

  // copy the www script only from bin
  fs.copySync(path.join(datPath, 'bin', 'www'),
    path.join(outputPath, 'bin', 'www'))

  // copy node src files
  fs.copySync(path.join(datPath, 'src'),
    path.join(outputPath, 'src'))

  // copy node pdf files, ignore files in temp folder
  const filterFunc = (src, dest) => {
    if (src.indexOf('temp') > -1) {
      return fs.statSync(src).isDirectory()
    } else {
      return true
    }
  }
  fs.copySync(path.join(datPath, 'pdf'),
    path.join(outputPath, 'pdf'),
    { filter: filterFunc })

  // // copy server views
  // fs.copySync(path.join(datPath, 'views'),
  //   path.join(outputPath, 'views'))

  // copy package.json  and shrinkwrap to server
  fs.copySync(path.join(datPath, 'package.json'),
    path.join(outputPath, 'package.json'))
  fs.copySync(path.join(datPath, 'package-lock.json'),
    path.join(outputPath, 'package-lock.json'))

  // copy package.json to `a2j-viewer/` for shared code
  // TODO: only install bootstrap in js dir, so may not need this
  fs.copySync(path.join(datPath, 'js', 'package.json'),
    path.join(outputPath, 'js', 'package.json'))
  fs.copySync(path.join(datPath, 'js', 'package-lock.json'),
    path.join(outputPath, 'js', 'package-lock.json'))

  // copy server.stache and server.js
  fs.copySync(path.join(datPath, 'js', 'server.stache'),
    path.join(outputPath, 'js', 'server.stache'))
  fs.copySync(path.join(datPath, 'js', 'server.js'),
    path.join(outputPath, 'js', 'server.js'))

  // copy shared styles required by the getCSSBundle call
  fs.copySync(path.join(datPath, 'js', 'styles'),
    path.join(outputPath, 'js', 'styles'))

  // copy author files required by build
  // TODO: figure out a way to skip author app imports that are not needed for dat
  fs.copySync(path.join(datPath, 'js', 'author', 'alert'),
    path.join(outputPath, 'js', 'author', 'alert'))
  fs.copySync(path.join(datPath, 'js', 'author', 'models'),
    path.join(outputPath, 'js', 'author', 'models'))
  fs.copySync(path.join(datPath, 'js', 'author', 'styles.less'),
    path.join(outputPath, 'js', 'author', 'styles.less'))
  fs.copySync(path.join(datPath, 'js', 'author', 'templates'),
    path.join(outputPath, 'js', 'author', 'templates'))
  fs.copySync(path.join(datPath, 'js', 'author', 'utils'),
    path.join(outputPath, 'js', 'author', 'utils'))
  fs.copySync(path.join(datPath, 'js', 'author', 'pdf'),
    path.join(outputPath, 'js', 'author', 'pdf'))
}

function makePackageZip () {
  var zip = archiver('zip')
  var timestamp = (new Date()).toISOString().substr(0, 10)
  var zipname = 'a2j-6-dat-' + timestamp + '.zip'
  var output = fs.createWriteStream(path.join(datPath, '..', zipname))

  output.on('close', function () {
    fs.removeSync(path.join(outputPath))
    console.log(chalk.green('A2J DAT distributable package generated successfully!'))
  })

  zip.pipe(output)
  zip.directory(outputPath, 'a2j-dat').finalize()
}
