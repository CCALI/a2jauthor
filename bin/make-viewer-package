#!/usr/bin/env node

var path = require('path');
var fs = require('fs-extra');
var chalk = require('chalk');
var archiver = require('archiver');
var stealTools = require('steal-tools');

var cajaPath = path.join(__dirname, '..');
var outputPath = path.join(cajaPath, '..', 'a2j-viewer');

var buildConfig = {
  main: 'viewer/app',
  config: path.join(cajaPath, 'js', 'package.json!npm')
};

var buildOptions = {
  minify: true,
  bundleSteal: true
};

// remove any existing build first
fs.removeSync(path.join(cajaPath, 'js', 'dist'));
fs.removeSync(outputPath);

stealTools.build(buildConfig, buildOptions)
  .then(function() {
    makePackageFolder();
    makePackageZip();
  })
  .catch(function(error) {
    fs.removeSync(path.join(outputPath));
    console.log(chalk.red('uh-oh something went wrong!'));
    throw error;
  });

function makePackageFolder() {
  fs.mkdirSync(outputPath);

  // copy the bundled viewer code to 'a2j-viewer/dist'
  fs.copySync(path.join(cajaPath, 'js', 'dist'),
              path.join(outputPath, 'dist'));

  // copy CAJA/demo content inside `a2j-viewer/`
  fs.copySync(path.join(cajaPath, 'demo'), outputPath);

  // copy package.json to `a2j-viewer/`
  fs.copySync(path.join(cajaPath, 'js', 'package.json'),
              path.join(outputPath, 'package.json'));

  // copy styles required by the avatar's svg file
  fs.copySync(path.join(cajaPath, 'js', 'styles', 'viewer-avatars.css'),
              path.join(outputPath, 'styles', 'viewer-avatars.css'));

  // copy viewer images to `a2j-viewer/viewer/images`
  fs.copySync(path.join(cajaPath, 'js', 'viewer', 'images'),
              path.join(outputPath, 'viewer', 'images'));
}

function makePackageZip() {
  var zip = archiver('zip');
  var timestamp = (new Date()).toISOString().substr(0, 10);
  var zipname = 'a2j-viewer-' + timestamp + '.zip';
  var output = fs.createWriteStream(path.join(cajaPath, '..', zipname));

  output.on('close', function() {
    fs.removeSync(path.join(outputPath));
    console.log(chalk.green('A2J VIEWER distributable package generated successfully!'));
  });

  zip.pipe(output);
  zip.directory(outputPath, 'a2j-viewer').finalize();
}
