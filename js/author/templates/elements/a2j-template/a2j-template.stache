<can-import from="caja/author/alert/" />
<can-import from="caja/author/templates/elements/a2j-variable/" />
<can-import from="caja/author/templates/elements/a2j-rich-text/" />
<can-import from="caja/author/templates/elements/a2j-page-break/" />
<can-import from="caja/author/templates/elements/a2j-repeat-loop/" />
<can-import from="caja/author/templates/elements/a2j-conditional/" />
<can-import from="caja/author/templates/elements/a2j-section-title/" />
<can-import from="caja/author/templates/elements/a2j-template/a2j-template.less!" />

<ul>
  {{#each rootNode.children}}
    <li
      draggable="true"
      class="node-wrapper{{#if(isBeingDragged)}} drag-placeholder{{/if}}">

      {{#if(deleted)}}
        <app-alert
          open:from="true"
          autoClose:from="true"
          dismissible:from="true"
          alertType:raw="default"
          on:vm:closed="../removeNodeFromChildren(id)">

          <p>
            Element has been deleted -
            <a href="#" on:el:click="../../restoreNode(id)">Restore</a>
          </p>
        </app-alert>
      {{/if}}

      {{#is(tag, 'a2j-page-break')}}
        <a2j-page-break
          notes:bind="state.notes"

          nodeId:from="id"
          cloneNode:from="../cloneNode"
          deleted:from="state.deleted"
          deleteNode:from="../deleteNode"
          updateNode:from="../updateNode"
          editEnabled:from="../editEnabled"
          fontProperties:from="../fontProperties"
          editActive:bind="./state.editActive"
          toggleEditActiveNode:from="../toggleEditActiveNode"
        />
      {{/is}}

      {{#is(tag, 'a2j-section-title')}}
        <a2j-section-title
          title:bind="state.title"
          underline:bind="state.underline"

          nodeId:from="id"
          cloneNode:from="../cloneNode"
          deleteNode:from="../deleteNode"
          updateNode:from="../updateNode"
          editEnabled:from="../editEnabled"
          fontProperties:from="../fontProperties"
          editActive:bind="./state.editActive"
          toggleEditActiveNode:from="../toggleEditActiveNode"
          sectionCounter:from="scope/rootNode.state.sectionCounter"
          titleTag:bind="state.titleTag"
        />
      {{/is}}

      {{#is(tag, 'a2j-rich-text')}}
        <a2j-rich-text
          notes:bind="state.notes"
          userContent:bind="state.userContent"

          nodeId:from="id"
          answers:from="scope/answers"
          cloneNode:from="../cloneNode"
          useAnswers:from="../useAnswers"
          deleted:from="./state.deleted"
          deleteNode:from="../deleteNode"
          updateNode:from="../updateNode"
          editEnabled:from="../editEnabled"
          fontProperties:from="../fontProperties"
          editActive:bind="./state.editActive"
          toggleEditActiveNode:from="../toggleEditActiveNode"
        />
      {{/is}}

      {{#is(tag, 'a2j-conditional')}}
        <a2j-conditional
          children:bind="children"
          operator:bind="state.operator"
          elseClause:bind="state.elseClause"
          leftOperand:bind="state.leftOperand"
          rightOperand:bind="state.rightOperand"
          variablesList:from="guide.variablesList"
          leftOperandType:bind="state.leftOperandType"
          rightOperandType:bind="state.rightOperandType"

          nodeId:from="id"
          answers:from="scope/answers"
          cloneNode:from="../cloneNode"
          useAnswers:from="../useAnswers"
          deleted:from="state.deleted"
          deleteNode:from="../deleteNode"
          updateNode:from="../updateNode"
          editEnabled:from="../editEnabled"
          fontProperties:from="../fontProperties"
          editActive:bind="./state.editActive"
          toggleEditActiveNode:from="../toggleEditActiveNode"
        />
      {{/is}}

      {{#is(tag, 'a2j-repeat-loop')}}
        <a2j-repeat-loop
          loopType:bind="state.loopType"
          loopTitle:bind="state.loopTitle"
          listItems:bind="state.listItems"
          tableStyle:bind="state.tableStyle"
          loopCounter:bind="state.loopCounter"
          displayType:bind="state.displayType"
          tableColumns:bind="state.tableColumns"
          loopVariable:bind="state.loopVariable"
          variablesList:from="guide.variablesList"
          loopTitleTag:bind="state.loopTitleTag"
          loopRichText:bind="state.loopRichText"
          listStyleType:bind="state.listStyleType"
          repeatEachInOneList:bind="state.repeatEachInOneList"

          nodeId:from="id"
          answers:from="scope/answers"
          cloneNode:from="../cloneNode"
          useAnswers:from="../useAnswers"
          deleted:from="state.deleted"
          deleteNode:from="../deleteNode"
          updateNode:from="../updateNode"
          editEnabled:from="../editEnabled"
          fontProperties:from="../fontProperties"
          editActive:bind="./state.editActive"
          toggleEditActiveNode:from="../toggleEditActiveNode"
        />
      {{/is}}
    </li>
  {{/each}}
</ul>
