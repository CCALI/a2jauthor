<can-import from="caja/author/alert/" />
<can-import from="caja/author/templates/elements/a2j-variable/" />
<can-import from="caja/author/templates/elements/a2j-rich-text/" />
<can-import from="caja/author/templates/elements/a2j-page-break/" />
<can-import from="caja/author/templates/elements/a2j-repeat-loop/" />
<can-import from="caja/author/templates/elements/a2j-conditional/" />
<can-import from="caja/author/templates/elements/a2j-section-title/" />
<can-import from="caja/author/templates/elements/a2j-template/a2j-template.less!" />

<ul>
  {{#for (childNode of rootNode.children) }}
    <li
      draggable="true"
      class="node-wrapper{{#if(childNode.isBeingDragged)}} drag-placeholder{{/if}}">

      {{#if (childNode.deleted) }}
        <app-alert
          open:raw="true"
          autoClose:raw="true"
          dismissible:raw="true"
          alertType:raw="default"
          on:vm:closed="scope/removeNodeFromChildren(childNode.id)">

          <p>
            Element has been deleted -
            <a href="#" on:el:click="scope/restoreNode(childNode.id, scope.event)">Restore</a>
          </p>
        </app-alert>
      {{/if}}

      {{#is (childNode.tag, 'a2j-page-break') }}
        <a2j-page-break
          notes:bind="childNode.state.notes"

          nodeId:from="childNode.id"
          cloneNode:from="scope/cloneNode"
          deleted:from="childNode.state.deleted"
          deleteNode:from="scope/deleteNode"
          updateNode:from="scope/updateNode"
          editEnabled:from="this.editEnabled"
          fontProperties:from="this.fontProperties"
          editActive:from="childNode.state.editActive"
          toggleEditActiveNode:from="toggleEditActiveNode"
        />
      {{/is}}

      {{#is (childNode.tag, 'a2j-section-title') }}
        <a2j-section-title
          title:bind="childNode.state.title"
          underline:bind="childNode.state.underline"

          nodeId:from="childNode.id"
          cloneNode:from="scope/cloneNode"
          deleted:from="childNode.state.deleted"
          deleteNode:from="scope/deleteNode"
          updateNode:from="scope/updateNode"
          editEnabled:from="this.editEnabled"
          fontProperties:from="this.fontProperties"
          editActive:from="childNode.state.editActive"
          toggleEditActiveNode:from="toggleEditActiveNode"
          sectionCounter:from="scope/rootNode.state.sectionCounter"
          titleTag:bind="childNode.state.titleTag"
        />
      {{/is}}

      {{#is (childNode.tag, 'a2j-rich-text') }}
        <a2j-rich-text
          notes:bind="childNode.state.notes"
          userContent:bind="childNode.state.userContent"
          nodeId:from="childNode.id"
          answers:from="scope/answers"
          cloneNode:from="scope/cloneNode"
          useAnswers:from="this.useAnswers"
          deleted:from="childNode.state.deleted"
          deleteNode:from="scope/deleteNode"
          updateNode:from="scope/updateNode"
          editEnabled:from="this.editEnabled"
          fontProperties:from="this.fontProperties"
          editActive:from="childNode.state.editActive"
          toggleEditActiveNode:from="toggleEditActiveNode"
        />
      {{/is}}

      {{#is (childNode.tag, 'a2j-conditional') }}
        <a2j-conditional
          children:bind="childNode.children"
          operator:bind="childNode.state.operator"
          elseClause:bind="childNode.state.elseClause"
          leftOperand:bind="childNode.state.leftOperand"
          rightOperand:bind="childNode.state.rightOperand"
          variablesList:from="this.guide.variablesList"
          leftOperandType:bind="childNode.state.leftOperandType"
          rightOperandType:bind="childNode.state.rightOperandType"

          nodeId:from="childNode.id"
          answers:from="answers"
          cloneNode:from="cloneNode"
          useAnswers:from="useAnswers"
          deleted:from="childNode.state.deleted"
          deleteNode:from="deleteNode"
          updateNode:from="updateNode"
          editEnabled:from="editEnabled"
          fontProperties:from="fontProperties"
          editActive:bind="childNode.state.editActive"
          toggleEditActiveNode:from="toggleEditActiveNode"
        />
      {{/is}}

      {{#is (childNode.tag, 'a2j-repeat-loop') }}
        <a2j-repeat-loop
          loopType:bind="childNode.state.loopType"
          loopTitle:bind="childNode.state.loopTitle"
          listItems:bind="childNode.state.listItems"
          tableStyle:bind="childNode.state.tableStyle"
          loopCounter:bind="childNode.state.loopCounter"
          displayType:bind="childNode.state.displayType"
          tableColumns:bind="childNode.state.tableColumns"
          loopVariable:bind="childNode.state.loopVariable"
          variablesList:bind="this.guide.variablesList"
          loopTitleTag:bind="childNode.state.loopTitleTag"
          loopRichText:bind="childNode.state.loopRichText"
          listStyleType:bind="childNode.state.listStyleType"
          repeatEachInOneList:bind="childNode.state.repeatEachInOneList"

          nodeId:from="childNode.id"
          answers:from="scope/answers"
          cloneNode:from="scope/cloneNode"
          useAnswers:from="this.useAnswers"
          deleted:from="childNode.state.deleted"
          deleteNode:from="scope/deleteNode"
          updateNode:from="scope/updateNode"
          editEnabled:from="this.editEnabled"
          fontProperties:from="this.fontProperties"
          editActive:from="childNode.state.editActive"
          toggleEditActiveNode:from="toggleEditActiveNode"
        />
      {{/is}}
    </li>
  {{/for}}
</ul>
